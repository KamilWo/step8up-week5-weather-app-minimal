{"mappings":"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","sources":["<anon>","src/assets/js/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // DOM Elements\n    const apiKeyInput = document.getElementById(\"api-key-input\");\n    const locationInput = document.getElementById(\"location-input\");\n    const getWeatherBtn = document.getElementById(\"get-weather-btn\");\n    const weatherResultDiv = document.getElementById(\"weather-result\");\n    const currentCityElement = document.getElementById(\"current-weather-city\");\n    const currentWeatherIcon = document.getElementById(\"current-weather-icon\");\n    const currentWeatherTemp = document.getElementById(\"current-weather-temp\");\n    const currentWeatherCondition = document.getElementById(\"current-weather-condition\");\n    const currentWeatherFeels = document.getElementById(\"current-weather-feels\");\n    const currentWeatherWind = document.getElementById(\"current-weather-wind\");\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const loadingSpinner = document.getElementById(\"loading\");\n    const avatarMenuBtn = document.getElementById(\"avatar-menu-btn\");\n    const apiKeySubmenu = document.getElementById(\"api-key-submenu\");\n    const forecastSection = document.getElementById(\"forecast-section\");\n    const forecastCarouselInner = document.getElementById(\"forecast-carousel-inner\");\n    const carouselIndicators = document.getElementById(\"carousel-indicators\");\n    // Fetch API Key from local storage on load\n    apiKeyInput.value = localStorage.getItem(\"OpenWeatherApiKey\") || \"\";\n    let API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n    // Toggle API Key submenu visibility\n    avatarMenuBtn.addEventListener(\"click\", ()=>{\n        apiKeySubmenu.classList.toggle(\"hidden\");\n    });\n    // Hide submenu if clicked outside\n    document.addEventListener(\"click\", (event)=>{\n        if (!avatarMenuBtn.contains(event.target) && !apiKeySubmenu.contains(event.target)) apiKeySubmenu.classList.add(\"hidden\");\n    });\n    // Function to display messages (error or loading)\n    const showMessage = (element, message, isError = false)=>{\n        hideAllDisplays(); // Hide all weather/forecast sections first\n        element.textContent = message;\n        element.classList.remove(\"hidden\");\n        if (isError) {\n            element.classList.add(\"error-message\");\n            element.classList.remove(\"weather-display\"); // Ensure no conflicting styles\n        } else element.classList.remove(\"error-message\");\n    };\n    // Function to hide all weather and forecast display areas\n    const hideAllDisplays = ()=>{\n        weatherResultDiv.classList.add(\"hidden\");\n        errorMessageDiv.classList.add(\"hidden\");\n        loadingSpinner.classList.add(\"hidden\");\n        forecastSection.classList.add(\"hidden\");\n    };\n    // Function to get coordinates for a given location\n    const getCoordinates = async (location)=>{\n        const geoApiUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${API_KEY}`;\n        try {\n            const response = await fetch(geoApiUrl);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            if (data.length > 0) return {\n                lat: data[0].lat,\n                lon: data[0].lon,\n                name: data[0].name,\n                country: data[0].country\n            };\n            else throw new Error(\"City not found.\");\n        } catch (error) {\n            console.error(\"Error fetching coordinates:\", error);\n            throw new Error(`Could not retrieve coordinates: ${error.message}`);\n        }\n    };\n    // Function to get current weather data\n    const getCurrentWeather = async (lat, lon, units = \"metric\")=>{\n        const weatherApiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n        try {\n            const response = await fetch(weatherApiUrl);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching current weather data:\", error);\n            throw new Error(`Could not retrieve current weather data: ${error.message}`);\n        }\n    };\n    // Function to get 5-day / 3-hour forecast data\n    const getFiveDayForecast = async (lat, lon, units = \"metric\")=>{\n        const forecastApiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n        try {\n            const response = await fetch(forecastApiUrl);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching forecast data:\", error);\n            throw new Error(`Could not retrieve forecast data: ${error.message}`);\n        }\n    };\n    // Function to display current weather\n    const displayCurrentWeather = (weatherData, locationName, countryCode)=>{\n        weatherResultDiv.classList.remove(\"hidden\");\n        currentCityElement.textContent = `${locationName}, ${countryCode}`;\n        currentWeatherTemp.textContent = `${Math.round(weatherData.main.temp)}\\xb0C`;\n        currentWeatherCondition.textContent = weatherData.weather[0].description;\n        currentWeatherFeels.textContent = `Feels like: ${Math.round(weatherData.main.feels_like)}\\xb0C`;\n        currentWeatherWind.textContent = `Wind: ${Math.round(weatherData.wind.speed * 3.6)} km/h`; // Convert m/s to km/h\n        currentWeatherIcon.src = `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`;\n        currentWeatherIcon.alt = weatherData.weather[0].description;\n    };\n    // Manual carousel implementation for navigation\n    let currentSlide = 0;\n    let totalSlides = 0;\n    const showSlide = (index)=>{\n        const slides = document.querySelectorAll('[data-carousel-item]');\n        const indicators = document.querySelectorAll('#carousel-indicators button');\n        // Hide all slides\n        slides.forEach((slide)=>{\n            slide.classList.add('hidden');\n            slide.classList.remove('active');\n        });\n        // Remove active state from all indicators\n        indicators.forEach((indicator)=>{\n            indicator.removeAttribute('aria-current');\n        });\n        // Show current slide\n        if (slides[index]) {\n            slides[index].classList.remove('hidden');\n            slides[index].classList.add('active');\n        }\n        // Update current indicator\n        if (indicators[index]) indicators[index].setAttribute('aria-current', 'true');\n    };\n    const nextSlide = ()=>{\n        currentSlide = (currentSlide + 1) % totalSlides;\n        showSlide(currentSlide);\n    };\n    const prevSlide = ()=>{\n        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;\n        showSlide(currentSlide);\n    };\n    // Function to display forecast in a carousel\n    const displayForecast = (forecastData, cityName)=>{\n        forecastSection.classList.remove(\"hidden\");\n        forecastCarouselInner.innerHTML = ''; // Clear previous items\n        carouselIndicators.innerHTML = ''; // Clear previous indicators\n        // Group forecast data by date\n        const weatherByDate = {};\n        forecastData.list.forEach((record)=>{\n            const date = new Date(record.dt * 1000);\n            const formattedDate = date.toLocaleDateString('en-GB', {\n                day: '2-digit',\n                month: 'short',\n                year: 'numeric'\n            });\n            if (!weatherByDate[formattedDate]) weatherByDate[formattedDate] = [];\n            weatherByDate[formattedDate].push(record);\n        });\n        let itemIndex = 0;\n        totalSlides = Object.keys(weatherByDate).length;\n        currentSlide = 0;\n        for(const date in weatherByDate){\n            // Create carousel item\n            const carouselItemDiv = document.createElement(\"div\");\n            carouselItemDiv.classList.add(\"hidden\", \"duration-700\", \"ease-in-out\");\n            carouselItemDiv.setAttribute(\"data-carousel-item\", \"\");\n            if (itemIndex === 0) {\n                carouselItemDiv.classList.remove(\"hidden\");\n                carouselItemDiv.classList.add(\"active\");\n            }\n            const hourlyContainer = document.createElement(\"div\");\n            hourlyContainer.classList.add(\"forecast-hourly-container\", \"flex\", \"flex-nowrap\", \"overflow-x-auto\", \"gap-4\", \"p-2\");\n            // Sort hourly data by time\n            weatherByDate[date].sort((a, b)=>a.dt - b.dt);\n            weatherByDate[date].forEach((hourlyRecord)=>{\n                const time = new Date(hourlyRecord.dt * 1000).toLocaleTimeString('en-GB', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: false\n                });\n                const iconUrl = `https://openweathermap.org/img/wn/${hourlyRecord.weather[0].icon}@2x.png`;\n                const hourCard = `\n          <div class=\"forecast-hour-card\">\n            <h3>${time}</h3>\n            <img src=\"${iconUrl}\" alt=\"${hourlyRecord.weather[0].description}\" class=\"weather-icon\">\n            <p class=\"capitalize\">${hourlyRecord.weather[0].description}</p>\n            <p>Temp: ${Math.round(hourlyRecord.main.temp)}\\xb0C</p>\n            <p>Wind: ${Math.round(hourlyRecord.wind.speed * 3.6)} km/h</p>\n          </div>\n        `;\n                hourlyContainer.insertAdjacentHTML('beforeend', hourCard);\n            });\n            carouselItemDiv.innerHTML = `\n        <div class=\"text-center mb-4\">\n          <h2 class=\"text-2xl font-bold text-gray-800\">${cityName}</h2>\n          <h3 class=\"text-xl font-semibold text-blue-600\">${date}</h3>\n        </div>\n      `;\n            carouselItemDiv.appendChild(hourlyContainer);\n            forecastCarouselInner.appendChild(carouselItemDiv);\n            // Create carousel indicator\n            const indicatorButton = document.createElement(\"button\");\n            indicatorButton.type = \"button\";\n            indicatorButton.classList.add(\"w-3\", \"h-3\", \"rounded-full\");\n            if (itemIndex === 0) indicatorButton.setAttribute(\"aria-current\", \"true\");\n            indicatorButton.setAttribute(\"aria-label\", `Slide ${itemIndex + 1}`);\n            indicatorButton.setAttribute(\"data-carousel-slide-to\", itemIndex.toString());\n            // Add click event for indicators\n            indicatorButton.addEventListener('click', ()=>{\n                currentSlide = itemIndex;\n                showSlide(currentSlide);\n            });\n            carouselIndicators.appendChild(indicatorButton);\n            itemIndex++;\n        }\n        // Add event listeners for navigation buttons\n        const prevButton = document.querySelector('[data-carousel-prev]');\n        const nextButton = document.querySelector('[data-carousel-next]');\n        // Remove existing event listeners\n        prevButton.replaceWith(prevButton.cloneNode(true));\n        nextButton.replaceWith(nextButton.cloneNode(true));\n        // Add new event listeners\n        document.querySelector('[data-carousel-prev]').addEventListener('click', prevSlide);\n        document.querySelector('[data-carousel-next]').addEventListener('click', nextSlide);\n    };\n    // Event listener for the \"Get Weather\" button\n    getWeatherBtn.addEventListener(\"click\", async ()=>{\n        const location = locationInput.value.trim();\n        if (!location) {\n            showMessage(errorMessageDiv, \"Please enter a location.\", true);\n            return;\n        }\n        if (!API_KEY || API_KEY === \"YOUR_API_KEY_HERE\") {\n            showMessage(errorMessageDiv, \"Please enter a valid OpenWeatherMap API Key in the menu.\", true);\n            return;\n        }\n        // Show loading spinner\n        showMessage(loadingSpinner, \"\", false);\n        try {\n            // Step 1: Get coordinates\n            const coords = await getCoordinates(location);\n            // Step 2: Get current weather\n            const currentWeatherData = await getCurrentWeather(coords.lat, coords.lon);\n            // Step 3: Get 5-day forecast\n            const forecastData = await getFiveDayForecast(coords.lat, coords.lon);\n            // Hide loading spinner and error messages\n            hideAllDisplays();\n            // Step 4: Display current weather data\n            displayCurrentWeather(currentWeatherData, coords.name, coords.country);\n            // Step 5: Display forecast data in carousel\n            displayForecast(forecastData, coords.name);\n        } catch (error) {\n            showMessage(errorMessageDiv, `Error: ${error.message}. Please ensure your API key is correct and the location exists.`, true);\n        }\n    });\n    apiKeyInput.addEventListener(\"input\", ()=>{\n        localStorage.setItem(\"OpenWeatherApiKey\", apiKeyInput.value.trim());\n        API_KEY = apiKeyInput.value.trim(); // Update API_KEY directly\n    });\n    // Optional: Allow pressing Enter in the input field to trigger search\n    locationInput.addEventListener(\"keypress\", (event)=>{\n        if (event.key === \"Enter\") getWeatherBtn.click();\n    });\n});\n\n//# sourceMappingURL=step8up-week5-weather-app-minimal.5cb2fe59.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  // DOM Elements\n  const apiKeyInput = document.getElementById(\"api-key-input\");\n  const locationInput = document.getElementById(\"location-input\");\n  const getWeatherBtn = document.getElementById(\"get-weather-btn\");\n  const weatherResultDiv = document.getElementById(\"weather-result\");\n  const currentCityElement = document.getElementById(\"current-weather-city\");\n  const currentWeatherIcon = document.getElementById(\"current-weather-icon\");\n  const currentWeatherTemp = document.getElementById(\"current-weather-temp\");\n  const currentWeatherCondition = document.getElementById(\"current-weather-condition\");\n  const currentWeatherFeels = document.getElementById(\"current-weather-feels\");\n  const currentWeatherWind = document.getElementById(\"current-weather-wind\");\n  const errorMessageDiv = document.getElementById(\"error-message\");\n  const loadingSpinner = document.getElementById(\"loading\");\n  const avatarMenuBtn = document.getElementById(\"avatar-menu-btn\");\n  const apiKeySubmenu = document.getElementById(\"api-key-submenu\");\n  const forecastSection = document.getElementById(\"forecast-section\");\n  const forecastCarouselInner = document.getElementById(\"forecast-carousel-inner\");\n  const carouselIndicators = document.getElementById(\"carousel-indicators\");\n\n  // Fetch API Key from local storage on load\n  apiKeyInput.value = localStorage.getItem(\"OpenWeatherApiKey\") || \"\";\n  let API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n\n  // Toggle API Key submenu visibility\n  avatarMenuBtn.addEventListener(\"click\", () => {\n    apiKeySubmenu.classList.toggle(\"hidden\");\n  });\n\n  // Hide submenu if clicked outside\n  document.addEventListener(\"click\", (event) => {\n    if (!avatarMenuBtn.contains(event.target) && !apiKeySubmenu.contains(event.target)) {\n      apiKeySubmenu.classList.add(\"hidden\");\n    }\n  });\n\n  // Function to display messages (error or loading)\n  const showMessage = (element, message, isError = false) => {\n    hideAllDisplays(); // Hide all weather/forecast sections first\n    element.textContent = message;\n    element.classList.remove(\"hidden\");\n    if (isError) {\n      element.classList.add(\"error-message\");\n      element.classList.remove(\"weather-display\"); // Ensure no conflicting styles\n    } else {\n      element.classList.remove(\"error-message\");\n    }\n  };\n\n  // Function to hide all weather and forecast display areas\n  const hideAllDisplays = () => {\n    weatherResultDiv.classList.add(\"hidden\");\n    errorMessageDiv.classList.add(\"hidden\");\n    loadingSpinner.classList.add(\"hidden\");\n    forecastSection.classList.add(\"hidden\");\n  };\n\n  // Function to get coordinates for a given location\n  const getCoordinates = async (location) => {\n    const geoApiUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${API_KEY}`;\n    try {\n      const response = await fetch(geoApiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      if (data.length > 0) {\n        return { lat: data[0].lat, lon: data[0].lon, name: data[0].name, country: data[0].country };\n      } else {\n        throw new Error(\"City not found.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n      throw new Error(`Could not retrieve coordinates: ${error.message}`);\n    }\n  };\n\n  // Function to get current weather data\n  const getCurrentWeather = async (lat, lon, units = \"metric\") => {\n    const weatherApiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n    try {\n      const response = await fetch(weatherApiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching current weather data:\", error);\n      throw new Error(`Could not retrieve current weather data: ${error.message}`);\n    }\n  };\n\n  // Function to get 5-day / 3-hour forecast data\n  const getFiveDayForecast = async (lat, lon, units = \"metric\") => {\n    const forecastApiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n    try {\n      const response = await fetch(forecastApiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching forecast data:\", error);\n      throw new Error(`Could not retrieve forecast data: ${error.message}`);\n    }\n  };\n\n  // Function to display current weather\n  const displayCurrentWeather = (weatherData, locationName, countryCode) => {\n    weatherResultDiv.classList.remove(\"hidden\");\n    currentCityElement.textContent = `${locationName}, ${countryCode}`;\n    currentWeatherTemp.textContent = `${Math.round(weatherData.main.temp)}°C`;\n    currentWeatherCondition.textContent = weatherData.weather[0].description;\n    currentWeatherFeels.textContent = `Feels like: ${Math.round(weatherData.main.feels_like)}°C`;\n    currentWeatherWind.textContent = `Wind: ${Math.round(weatherData.wind.speed * 3.6)} km/h`; // Convert m/s to km/h\n    currentWeatherIcon.src = `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`;\n    currentWeatherIcon.alt = weatherData.weather[0].description;\n  };\n\n  // Manual carousel implementation for navigation\n  let currentSlide = 0;\n  let totalSlides = 0;\n\n  const showSlide = (index) => {\n    const slides = document.querySelectorAll('[data-carousel-item]');\n    const indicators = document.querySelectorAll('#carousel-indicators button');\n\n    // Hide all slides\n    slides.forEach(slide => {\n      slide.classList.add('hidden');\n      slide.classList.remove('active');\n    });\n\n    // Remove active state from all indicators\n    indicators.forEach(indicator => {\n      indicator.removeAttribute('aria-current');\n    });\n\n    // Show current slide\n    if (slides[index]) {\n      slides[index].classList.remove('hidden');\n      slides[index].classList.add('active');\n    }\n\n    // Update current indicator\n    if (indicators[index]) {\n      indicators[index].setAttribute('aria-current', 'true');\n    }\n  };\n\n  const nextSlide = () => {\n    currentSlide = (currentSlide + 1) % totalSlides;\n    showSlide(currentSlide);\n  };\n\n  const prevSlide = () => {\n    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;\n    showSlide(currentSlide);\n  };\n\n  // Function to display forecast in a carousel\n  const displayForecast = (forecastData, cityName) => {\n    forecastSection.classList.remove(\"hidden\");\n    forecastCarouselInner.innerHTML = ''; // Clear previous items\n    carouselIndicators.innerHTML = ''; // Clear previous indicators\n\n    // Group forecast data by date\n    const weatherByDate = {};\n    forecastData.list.forEach(record => {\n      const date = new Date(record.dt * 1000);\n      const formattedDate = date.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\n\n      if (!weatherByDate[formattedDate]) {\n        weatherByDate[formattedDate] = [];\n      }\n      weatherByDate[formattedDate].push(record);\n    });\n\n    let itemIndex = 0;\n    totalSlides = Object.keys(weatherByDate).length;\n    currentSlide = 0;\n\n    for (const date in weatherByDate) {\n      // Create carousel item\n      const carouselItemDiv = document.createElement(\"div\");\n      carouselItemDiv.classList.add(\"hidden\", \"duration-700\", \"ease-in-out\");\n      carouselItemDiv.setAttribute(\"data-carousel-item\", \"\");\n      if (itemIndex === 0) {\n        carouselItemDiv.classList.remove(\"hidden\");\n        carouselItemDiv.classList.add(\"active\");\n      }\n\n      const hourlyContainer = document.createElement(\"div\");\n      hourlyContainer.classList.add(\"forecast-hourly-container\", \"flex\", \"flex-nowrap\", \"overflow-x-auto\", \"gap-4\", \"p-2\");\n\n      // Sort hourly data by time\n      weatherByDate[date].sort((a, b) => a.dt - b.dt);\n\n      weatherByDate[date].forEach(hourlyRecord => {\n        const time = new Date(hourlyRecord.dt * 1000).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false });\n        const iconUrl = `https://openweathermap.org/img/wn/${hourlyRecord.weather[0].icon}@2x.png`;\n\n        const hourCard = `\n          <div class=\"forecast-hour-card\">\n            <h3>${time}</h3>\n            <img src=\"${iconUrl}\" alt=\"${hourlyRecord.weather[0].description}\" class=\"weather-icon\">\n            <p class=\"capitalize\">${hourlyRecord.weather[0].description}</p>\n            <p>Temp: ${Math.round(hourlyRecord.main.temp)}°C</p>\n            <p>Wind: ${Math.round(hourlyRecord.wind.speed * 3.6)} km/h</p>\n          </div>\n        `;\n        hourlyContainer.insertAdjacentHTML('beforeend', hourCard);\n      });\n\n      carouselItemDiv.innerHTML = `\n        <div class=\"text-center mb-4\">\n          <h2 class=\"text-2xl font-bold text-gray-800\">${cityName}</h2>\n          <h3 class=\"text-xl font-semibold text-blue-600\">${date}</h3>\n        </div>\n      `;\n      carouselItemDiv.appendChild(hourlyContainer);\n      forecastCarouselInner.appendChild(carouselItemDiv);\n\n      // Create carousel indicator\n      const indicatorButton = document.createElement(\"button\");\n      indicatorButton.type = \"button\";\n      indicatorButton.classList.add(\"w-3\", \"h-3\", \"rounded-full\");\n      if (itemIndex === 0) {\n        indicatorButton.setAttribute(\"aria-current\", \"true\");\n      }\n      indicatorButton.setAttribute(\"aria-label\", `Slide ${itemIndex + 1}`);\n      indicatorButton.setAttribute(\"data-carousel-slide-to\", itemIndex.toString());\n\n      // Add click event for indicators\n      indicatorButton.addEventListener('click', () => {\n        currentSlide = itemIndex;\n        showSlide(currentSlide);\n      });\n\n      carouselIndicators.appendChild(indicatorButton);\n      itemIndex++;\n    }\n\n    // Add event listeners for navigation buttons\n    const prevButton = document.querySelector('[data-carousel-prev]');\n    const nextButton = document.querySelector('[data-carousel-next]');\n\n    // Remove existing event listeners\n    prevButton.replaceWith(prevButton.cloneNode(true));\n    nextButton.replaceWith(nextButton.cloneNode(true));\n\n    // Add new event listeners\n    document.querySelector('[data-carousel-prev]').addEventListener('click', prevSlide);\n    document.querySelector('[data-carousel-next]').addEventListener('click', nextSlide);\n  };\n\n  // Event listener for the \"Get Weather\" button\n  getWeatherBtn.addEventListener(\"click\", async () => {\n    const location = locationInput.value.trim();\n\n    if (!location) {\n      showMessage(errorMessageDiv, \"Please enter a location.\", true);\n      return;\n    }\n    if (!API_KEY || API_KEY === \"YOUR_API_KEY_HERE\") {\n      showMessage(errorMessageDiv, \"Please enter a valid OpenWeatherMap API Key in the menu.\", true);\n      return;\n    }\n\n    // Show loading spinner\n    showMessage(loadingSpinner, \"\", false);\n\n    try {\n      // Step 1: Get coordinates\n      const coords = await getCoordinates(location);\n\n      // Step 2: Get current weather\n      const currentWeatherData = await getCurrentWeather(coords.lat, coords.lon);\n\n      // Step 3: Get 5-day forecast\n      const forecastData = await getFiveDayForecast(coords.lat, coords.lon);\n\n      // Hide loading spinner and error messages\n      hideAllDisplays();\n\n      // Step 4: Display current weather data\n      displayCurrentWeather(currentWeatherData, coords.name, coords.country);\n\n      // Step 5: Display forecast data in carousel\n      displayForecast(forecastData, coords.name);\n\n    } catch (error) {\n      showMessage(errorMessageDiv,\n        `Error: ${error.message}. Please ensure your API key is correct and the location exists.`, true);\n    }\n  });\n\n  apiKeyInput.addEventListener(\"input\", () => {\n    localStorage.setItem(\"OpenWeatherApiKey\", apiKeyInput.value.trim());\n    API_KEY = apiKeyInput.value.trim(); // Update API_KEY directly\n  });\n\n  // Optional: Allow pressing Enter in the input field to trigger search\n  locationInput.addEventListener(\"keypress\", (event) => {\n    if (event.key === \"Enter\") {\n      getWeatherBtn.click();\n    }\n  });\n});\n"],"names":["document","addEventListener","apiKeyInput","getElementById","locationInput","getWeatherBtn","weatherResultDiv","currentCityElement","currentWeatherIcon","currentWeatherTemp","currentWeatherCondition","currentWeatherFeels","currentWeatherWind","errorMessageDiv","loadingSpinner","avatarMenuBtn","apiKeySubmenu","forecastSection","forecastCarouselInner","carouselIndicators","value","localStorage","getItem","API_KEY","trim","classList","toggle","event","contains","target","add","showMessage","element","message","isError","hideAllDisplays","textContent","remove","getCoordinates","location","geoApiUrl","encodeURIComponent","response","fetch","ok","Error","status","data","json","length","lat","lon","name","country","error","console","getCurrentWeather","units","weatherApiUrl","getFiveDayForecast","forecastApiUrl","currentSlide","totalSlides","showSlide","index","slides","querySelectorAll","indicators","forEach","slide","indicator","removeAttribute","setAttribute","nextSlide","prevSlide","coords","currentWeatherData","forecastData","displayCurrentWeather","weatherData","locationName","countryCode","Math","round","main","temp","weather","description","feels_like","wind","speed","src","icon","alt","displayForecast","cityName","innerHTML","weatherByDate","list","record","formattedDate","date","Date","dt","toLocaleDateString","day","month","year","push","itemIndex","Object","keys","carouselItemDiv","createElement","hourlyContainer","sort","a","b","hourlyRecord","time","toLocaleTimeString","hour","minute","hour12","iconUrl","hourCard","insertAdjacentHTML","appendChild","indicatorButton","type","toString","prevButton","querySelector","nextButton","replaceWith","cloneNode","setItem","key","click"],"version":3,"file":"step8up-week5-weather-app-minimal.5cb2fe59.js.map"}