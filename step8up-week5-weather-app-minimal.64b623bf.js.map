{"mappings":"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","sources":["<anon>","src/assets/js/script2.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    const apiKeyInput = document.getElementById(\"api-key-input\");\n    // Fetch API Key from local storage if empty\n    if (apiKeyInput.value.trim() === \"\") apiKeyInput.value = localStorage.getItem(\"OpenWeatherApiKey\") || \"\";\n    let API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n    // DOM Elements\n    const locationInput = document.getElementById(\"location-input\");\n    const getWeatherBtn = document.getElementById(\"get-weather-btn\");\n    const weatherResultDiv = document.getElementById(\"weather-result\");\n    const errorMessageDiv = document.getElementById(\"error-message\");\n    const loadingSpinner = document.getElementById(\"loading\");\n    showMessage = (element, message, isError = false)=>{\n        hideAllMessages();\n        element.textContent = message;\n        element.classList.remove(\"hidden\");\n        if (isError) {\n            element.classList.add(\"error-message\");\n            element.classList.remove(\"weather-display\");\n        } else {\n            element.classList.remove(\"error-message\");\n            // For loading spinner, ensures no extra styles\n            element.classList.remove(\"weather-display\");\n        }\n    };\n    //Function to hid all display areas\n    hideAllMessages = ()=>{\n        weatherResultDiv.classList.add(\"hidden\");\n        errorMessageDiv.classList.add(\"hidden\");\n        loadingSpinner.classList.add(\"hidden\");\n    };\n    getCoordinates = async (location)=>{\n        // Geocoding API endpoint\n        const geoApiUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${API_KEY}`;\n        try {\n            const response = await fetch(geoApiUrl);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            if (data.length > 0) // Return the first found location's coordinates\n            return {\n                lat: data[0].lat,\n                lon: data[0].lon,\n                name: data[0].name,\n                country: data[0].country\n            };\n        } catch (error) {\n            console.error(\"Error fetching coordinates:\", error);\n            throw new Error(`Could not retrieve coordinates: ${error.message}`);\n        }\n    };\n    // Function to get current weather data using coordinates\n    getCurrentWeather = async (lat, lon, units = \"metric\")=>{\n        // Current Weather Data API endpoint\n        const weatherApiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n        try {\n            const response = await fetch(weatherApiUrl);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching weather data:\", error);\n            throw new Error(`Could not retrieve weather data: ${error.message}`);\n        }\n    };\n    displayWeather = (weatherData, locationName, countryCode)=>{\n        hideAllMessages();\n        weatherResultDiv.classList.remove(\"hidden\");\n        const name = weatherData.name;\n        const temp = weatherData.main.temp;\n        const description = weatherData.weather[0].description;\n        weatherResultDiv.innerHTML = `\n              <h2 class=\"text-blue-700\">${name}, ${countryCode}</h2>\n              <p>Temperature: <span class=\"font-bold\">${temp}\\xb0C</span></p>\n              <p>Condition: <span class=\"capitalize\">${description}</span></p>\n          `;\n    };\n    // Event listener for the \"Get Weather\" button\n    getWeatherBtn.addEventListener(\"click\", async ()=>{\n        const location = locationInput.value.trim();\n        if (!location) {\n            showMessage(errorMessageDiv, \"Please enter a location.\", true);\n            return;\n        }\n        // Show loading spinner\n        showMessage(loadingSpinner, \"\", false); // Clear message, just show spinner\n        try {\n            // Step 1: Get coordinates\n            const coords = await getCoordinates(location);\n            // Step 2: Get current weather using the coordinates\n            const weatherData = await getCurrentWeather(coords.lat, coords.lon);\n            // Step 3: Display the weather data\n            displayWeather(weatherData, coords.name, coords.country);\n        } catch (error) {\n            showMessage(errorMessageDiv, `Error: ${error.message}. Please ensure your API key is correct and the location exists.`, true);\n        }\n    });\n    apiKeyInput.addEventListener(\"input\", ()=>{\n        localStorage.setItem(\"OpenWeatherApiKey\", apiKeyInput.value.trim());\n        API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n    });\n    // Optional: Allow pressing Enter in the input field to trigger search\n    locationInput.addEventListener(\"keypress\", (event)=>{\n        if (event.key === \"Enter\") getWeatherBtn.click();\n    });\n});\n\n//# sourceMappingURL=step8up-week5-weather-app-minimal.64b623bf.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  const apiKeyInput = document.getElementById(\"api-key-input\");\n  // Fetch API Key from local storage if empty\n  if (apiKeyInput.value.trim() === \"\") {\n    apiKeyInput.value = localStorage.getItem(\"OpenWeatherApiKey\") || \"\";\n  }\n  let API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n\n  // DOM Elements\n  const locationInput = document.getElementById(\"location-input\");\n  const getWeatherBtn = document.getElementById(\"get-weather-btn\");\n  const weatherResultDiv = document.getElementById(\"weather-result\");\n  const errorMessageDiv = document.getElementById(\"error-message\");\n  const loadingSpinner = document.getElementById(\"loading\");\n\n  showMessage = (element, message, isError = false) => {\n    hideAllMessages();\n    element.textContent = message;\n    element.classList.remove(\"hidden\");\n    if (isError) {\n      element.classList.add(\"error-message\");\n      element.classList.remove(\"weather-display\");\n    } else {\n      element.classList.remove(\"error-message\");\n      // For loading spinner, ensures no extra styles\n      element.classList.remove(\"weather-display\");\n    }\n  }\n\n  //Function to hid all display areas\n  hideAllMessages = () => {\n    weatherResultDiv.classList.add(\"hidden\");\n    errorMessageDiv.classList.add(\"hidden\");\n    loadingSpinner.classList.add(\"hidden\");\n  }\n\n  getCoordinates = async (location) => {\n    // Geocoding API endpoint\n    const geoApiUrl =\n      `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(location)}&limit=1&appid=${API_KEY}`;\n\n    try {\n      const response = await fetch(geoApiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      if (data.length > 0) {\n        // Return the first found location's coordinates\n        return {lat: data[0].lat, lon: data[0].lon, name: data[0].name, country: data[0].country};\n      }\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n      throw new Error(`Could not retrieve coordinates: ${error.message}`);\n    }\n  }\n\n  // Function to get current weather data using coordinates\n  getCurrentWeather = async (lat, lon, units = \"metric\") => {\n    // Current Weather Data API endpoint\n    const weatherApiUrl =\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n\n    try {\n      const response = await fetch(weatherApiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      throw new Error(`Could not retrieve weather data: ${error.message}`);\n    }\n  }\n\n  displayWeather = (weatherData, locationName, countryCode) => {\n    hideAllMessages();\n    weatherResultDiv.classList.remove(\"hidden\");\n\n    const name = weatherData.name;\n    const temp = weatherData.main.temp;\n    const description = weatherData.weather[0].description;\n\n    weatherResultDiv.innerHTML = `\n              <h2 class=\"text-blue-700\">${name}, ${countryCode}</h2>\n              <p>Temperature: <span class=\"font-bold\">${temp}°C</span></p>\n              <p>Condition: <span class=\"capitalize\">${description}</span></p>\n          `;\n  }\n\n  // Event listener for the \"Get Weather\" button\n  getWeatherBtn.addEventListener(\"click\", async () => {\n    const location = locationInput.value.trim();\n\n    if (!location) {\n      showMessage(errorMessageDiv, \"Please enter a location.\", true);\n      return;\n    }\n\n    // Show loading spinner\n    showMessage(loadingSpinner, \"\", false); // Clear message, just show spinner\n\n    try {\n      // Step 1: Get coordinates\n      const coords = await getCoordinates(location);\n\n      // Step 2: Get current weather using the coordinates\n      const weatherData = await getCurrentWeather(coords.lat, coords.lon);\n\n      // Step 3: Display the weather data\n      displayWeather(weatherData, coords.name, coords.country);\n\n    } catch (error) {\n      showMessage(errorMessageDiv,\n        `Error: ${error.message}. Please ensure your API key is correct and the location exists.`, true);\n    }\n  });\n\n  apiKeyInput.addEventListener(\"input\", () => {\n    localStorage.setItem(\"OpenWeatherApiKey\", apiKeyInput.value.trim());\n    API_KEY = apiKeyInput.value.trim() || \"YOUR_API_KEY_HERE\";\n  });\n\n  // Optional: Allow pressing Enter in the input field to trigger search\n  locationInput.addEventListener(\"keypress\", (event) => {\n    if (event.key === \"Enter\") {\n      getWeatherBtn.click();\n    }\n  });\n});\n"],"names":["document","addEventListener","apiKeyInput","getElementById","value","trim","localStorage","getItem","API_KEY","locationInput","getWeatherBtn","weatherResultDiv","errorMessageDiv","loadingSpinner","showMessage","element","message","isError","hideAllMessages","textContent","classList","remove","add","getCoordinates","location","geoApiUrl","encodeURIComponent","response","fetch","ok","Error","status","data","json","length","lat","lon","name","country","error","console","getCurrentWeather","units","weatherApiUrl","displayWeather","weatherData","locationName","countryCode","temp","main","description","weather","innerHTML","coords","setItem","event","key","click"],"version":3,"file":"step8up-week5-weather-app-minimal.64b623bf.js.map"}